
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Automação Predial - Gerenciamento de Água</title>
    <!-- Tailwind CSS via CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700;800;900&display=swap');
        :root { font-family: 'Inter', sans-serif; }
        body { margin: 0; }
        
        /* Efeito de fundo animado */
        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(135deg, #0c4a6e, #1e3a8a, #0d9488);
            background-size: 400% 400%;
            animation: gradient-animation 15s ease infinite;
            opacity: 0.8;
            z-index: -1;
        }

        @keyframes gradient-animation {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }

        /* Efeito de "glow" em cards ativos */
        .status-glow {
            box-shadow: 0 0 10px #38bdf8, 0 0 20px #22d3ee;
            transition: box-shadow 0.5s ease-in-out;
        }
        .status-red-glow {
             box-shadow: 0 0 10px #f87171, 0 0 20px #ef4444;
        }

        /* Efeito de movimento para o ícone de gota */
        .water-icon { animation: pulse-bounce 2s infinite ease-in-out; }
        @keyframes pulse-bounce {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.1) translateY(-5px); }
        }
        
        /* Estiliza o switch para dark mode */
        .peer:checked ~ .bg-gray-600 { background-color: #3b82f6; }
        .peer:checked ~ .dark\\:bg-gray-600 { background-color: #2563eb; }
        .peer:checked ~ .bg-gray-600:after { transform: translateX(100%); }
        .peer:checked ~ .bg-gray-600:after { border-color: #fff; }

        /* Estilos para elementos desabilitados */
        .disabled-element {
            opacity: 0.5;
            cursor: not-allowed;
            pointer-events: none;
        }
    </style>
</head>
<body class="bg-gray-900 text-gray-100 transition-colors duration-500">
    <!-- Botão de Alternar Tema (Modo Escuro/Claro) -->
    <button id="theme-toggle" class="absolute top-4 right-4 z-40 p-2 rounded-full shadow-md hover:scale-110 transition-transform duration-300 bg-gray-800 text-white dark:bg-gray-200 dark:text-gray-800">
        <!-- Ícone do Sol (apenas para modo escuro) -->
        <svg id="sun-icon" class="w-6 h-6" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="4"/><path d="M12 2v2"/><path d="M12 20v2"/><path d="M4.93 4.93l1.41 1.41"/><path d="M17.66 17.66l1.41 1.41"/><path d="M2 12h2"/><path d="M20 12h2"/><path d="M6.34 17.66l-1.41 1.41"/><path d="M19.07 4.93l-1.41 1.41"/></svg>
        <!-- Ícone da Lua (apenas para modo claro) -->
        <svg id="moon-icon" class="w-6 h-6 hidden" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9Z"/></svg>
    </button>

    <!-- Container Principal da Aplicação -->
    <div id="app-container" class="min-h-screen w-screen flex items-center justify-center font-sans relative overflow-auto p-4 md:p-8">
        
        <!-- Tela de Login -->
        <div id="login-screen" class="z-10 p-8 md:p-12 rounded-3xl shadow-2xl max-w-sm w-full mx-4 transform transition-all duration-500 bg-gray-800 bg-opacity-80 backdrop-blur-md dark:bg-gray-200 dark:bg-opacity-80">
            <div class="text-center mb-6">
                <div class="flex items-center justify-center space-x-2 mb-2">
                    <!-- Ícone de Gota Animado -->
                    <svg class="text-blue-500 w-16 h-16 water-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M12 2.69l5.66 5.66a8 8 0 1 1-11.32 0z"/></svg>
                    <h1 class="text-3xl font-extrabold text-white dark:text-gray-800">Automação Predial</h1>
                </div>
                <p class="text-sm font-medium text-gray-400 dark:text-gray-600">Sistema de Gerenciamento de Água</p>
            </div>
            <form id="login-form" class="space-y-6">
                <div>
                    <label class="block text-sm font-bold mb-1 text-gray-300 dark:text-gray-700">Usuário</label>
                    <div class="relative">
                        <svg class="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 w-5 h-5" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2"/><circle cx="12" cy="7" r="4"/></svg>
                        <input type="text" id="username-input" class="w-full pl-10 pr-3 py-2 border border-gray-700 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-gray-700 text-white dark:bg-gray-300 dark:text-gray-900" placeholder="Digite o usuário" />
                    </div>
                </div>
                <div>
                    <label class="block text-sm font-bold mb-1 text-gray-300 dark:text-gray-700">Senha</label>
                    <div class="relative">
                        <svg class="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 w-5 h-5" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect width="18" height="11" x="3" y="11" rx="2" ry="2"/><path d="M7 11V7a5 5 0 0 1 10 0v4"/></svg>
                        <input type="password" id="password-input" class="w-full pl-10 pr-10 py-2 border border-gray-700 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-gray-700 text-white dark:bg-gray-300 dark:text-gray-900" placeholder="Digite a senha" />
                        <button type="button" class="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-white transition-colors duration-200 show-password-btn">
                            <!-- Ícone de Olho Fechado -->
                            <svg class="w-5 h-5 show-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z"/><circle cx="12" cy="12" r="3"/></svg>
                            <!-- Ícone de Olho Aberto -->
                            <svg class="w-5 h-5 hidden hide-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M9.88 9.88a3 3 0 1 0 4.24 4.24"/><path d="M10.73 5.08A10.43 10.43 0 0 1 12 5c7 0 10 7 10 7a13.16 13.16 0 0 1-1.67 2.68"/><path d="M6 18a14.72 14.72 0 0 1-4-6c0-1.01.24-2.07.67-3.11"/><path d="M18.51 16.92A9.03 9.03 0 0 1 12 19c-7 0-10-7-10-7a11.64 11.64 0 0 1 1.74-2.82"/><line x1="2" x2="22" y1="2" y2="22"/></svg>
                        </button>
                    </div>
                </div>
                <p id="login-error" class="text-red-400 text-sm font-semibold text-center hidden"></p>
                <button type="submit" class="w-full py-3 rounded-xl font-bold text-white shadow-lg transition-all duration-300 transform hover:scale-105 bg-gradient-to-r from-blue-600 to-cyan-500 hover:from-blue-700 hover:to-cyan-600">
                    Entrar
                </button>
                <a href="#" id="show-register-btn" class="block text-center text-sm font-bold text-gray-400 hover:text-blue-400 transition-colors duration-300">
                    Não tem uma conta? Crie uma aqui.
                </a>
            </form>
        </div>

        <!-- Tela de Cadastro -->
        <div id="register-screen" class="hidden z-10 p-8 md:p-12 rounded-3xl shadow-2xl max-w-sm w-full mx-4 transform transition-all duration-500 bg-gray-800 bg-opacity-80 backdrop-blur-md dark:bg-gray-200 dark:bg-opacity-80">
            <div class="text-center mb-6">
                <div class="flex items-center justify-center space-x-2 mb-2">
                    <svg class="text-blue-500 w-16 h-16 water-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M12 2.69l5.66 5.66a8 8 0 1 1-11.32 0z"/></svg>
                    <h1 class="text-3xl font-extrabold text-white dark:text-gray-800">Criar Conta</h1>
                </div>
                <p class="text-sm font-medium text-gray-400 dark:text-gray-600">Preencha os dados para se registrar.</p>
            </div>
            <form id="register-form" class="space-y-6">
                <div>
                    <label class="block text-sm font-bold mb-1 text-gray-300 dark:text-gray-700">Usuário</label>
                    <div class="relative">
                        <svg class="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 w-5 h-5" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2"/><circle cx="12" cy="7" r="4"/></svg>
                        <input type="text" id="register-username-input" class="w-full pl-10 pr-3 py-2 border border-gray-700 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-gray-700 text-white dark:bg-gray-300 dark:text-gray-900" placeholder="Crie um usuário" />
                    </div>
                </div>
                <div>
                    <label class="block text-sm font-bold mb-1 text-gray-300 dark:text-gray-700">Senha</label>
                    <div class="relative">
                        <svg class="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 w-5 h-5" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect width="18" height="11" x="3" y="11" rx="2" ry="2"/><path d="M7 11V7a5 5 0 0 1 10 0v4"/></svg>
                        <input type="password" id="register-password-input" class="w-full pl-10 pr-10 py-2 border border-gray-700 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-gray-700 text-white dark:bg-gray-300 dark:text-gray-900" placeholder="Crie uma senha (min. 8 dígitos)" />
                        <button type="button" class="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-white transition-colors duration-200 show-password-btn">
                             <!-- Ícone de Olho Fechado -->
                            <svg class="w-5 h-5 show-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z"/><circle cx="12" cy="12" r="3"/></svg>
                            <!-- Ícone de Olho Aberto -->
                            <svg class="w-5 h-5 hidden hide-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M9.88 9.88a3 3 0 1 0 4.24 4.24"/><path d="M10.73 5.08A10.43 10.43 0 0 1 12 5c7 0 10 7 10 7a13.16 13.16 0 0 1-1.67 2.68"/><path d="M6 18a14.72 14.72 0 0 1-4-6c0-1.01.24-2.07.67-3.11"/><path d="M18.51 16.92A9.03 9.03 0 0 1 12 19c-7 0-10-7-10-7a11.64 11.64 0 0 1 1.74-2.82"/><line x1="2" x2="22" y1="2" y2="22"/></svg>
                        </button>
                    </div>
                </div>
                <div>
                    <label class="block text-sm font-bold mb-1 text-gray-300 dark:text-gray-700">Repetir Senha</label>
                    <div class="relative">
                        <svg class="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 w-5 h-5" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect width="18" height="11" x="3" y="11" rx="2" ry="2"/><path d="M7 11V7a5 5 0 0 1 10 0v4"/></svg>
                        <input type="password" id="register-password-confirm-input" class="w-full pl-10 pr-10 py-2 border border-gray-700 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-gray-700 text-white dark:bg-gray-300 dark:text-gray-900" placeholder="Repita a senha" />
                        <button type="button" class="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-white transition-colors duration-200 show-password-btn">
                             <!-- Ícone de Olho Fechado -->
                            <svg class="w-5 h-5 show-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z"/><circle cx="12" cy="12" r="3"/></svg>
                            <!-- Ícone de Olho Aberto -->
                            <svg class="w-5 h-5 hidden hide-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M9.88 9.88a3 3 0 1 0 4.24 4.24"/><path d="M10.73 5.08A10.43 10.43 0 0 1 12 5c7 0 10 7 10 7a13.16 13.16 0 0 1-1.67 2.68"/><path d="M6 18a14.72 14.72 0 0 1-4-6c0-1.01.24-2.07.67-3.11"/><path d="M18.51 16.92A9.03 9.03 0 0 1 12 19c-7 0-10-7-10-7a11.64 11.64 0 0 1 1.74-2.82"/><line x1="2" x2="22" y1="2" y2="22"/></svg>
                        </button>
                    </div>
                </div>
                 <div>
                    <label class="block text-sm font-bold mb-1 text-gray-300 dark:text-gray-700">Token de Segurança</label>
                    <div class="relative">
                        <svg class="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 w-5 h-5" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M5 22V5.5C5 4.34 5.94 3.3 7.1 3.3h9.8C18.06 3.3 19 4.34 19 5.5V22l-7-3.5-7 3.5Z"/></svg>
                        <input type="password" id="register-token-input" class="w-full pl-10 pr-10 py-2 border border-gray-700 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-gray-700 text-white dark:bg-gray-300 dark:text-gray-900" placeholder="Digite o token" />
                        <button type="button" class="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-white transition-colors duration-200 show-password-btn">
                             <!-- Ícone de Olho Fechado -->
                            <svg class="w-5 h-5 show-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z"/><circle cx="12" cy="12" r="3"/></svg>
                            <!-- Ícone de Olho Aberto -->
                            <svg class="w-5 h-5 hidden hide-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M9.88 9.88a3 3 0 1 0 4.24 4.24"/><path d="M10.73 5.08A10.43 10.43 0 0 1 12 5c7 0 10 7 10 7a13.16 13.16 0 0 1-1.67 2.68"/><path d="M6 18a14.72 14.72 0 0 1-4-6c0-1.01.24-2.07.67-3.11"/><path d="M18.51 16.92A9.03 9.03 0 0 1 12 19c-7 0-10-7-10-7a11.64 11.64 0 0 1 1.74-2.82"/><line x1="2" x2="22" y1="2" y2="22"/></svg>
                        </button>
                    </div>
                </div>
                <p id="register-error" class="text-red-400 text-sm font-semibold text-center hidden"></p>
                <button type="submit" class="w-full py-3 rounded-xl font-bold text-white shadow-lg transition-all duration-300 transform hover:scale-105 bg-gradient-to-r from-blue-600 to-cyan-500 hover:from-blue-700 hover:to-cyan-600">
                    Cadastrar
                </button>
                <a href="#" id="show-login-btn" class="block text-center text-sm font-bold text-gray-400 hover:text-blue-400 transition-colors duration-300">
                    Já tem uma conta? Voltar para o login.
                </a>
            </form>
        </div>


        <!-- Tela do Dashboard -->
        <div id="dashboard-screen" class="hidden z-10 w-full max-w-6xl mx-auto min-h-screen pt-12 pb-8">
            <header class="flex flex-col md:flex-row items-center justify-between mb-10 p-6 rounded-3xl shadow-2xl bg-gray-800 bg-opacity-80 backdrop-blur-md dark:bg-gray-200 dark:bg-opacity-80">
                <div class="flex items-center space-x-4 mb-4 md:mb-0">
                    <svg class="text-blue-500 w-12 h-12 water-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M12 2.69l5.66 5.66a8 8 0 1 1-11.32 0z"/></svg>
                    <h1 class="text-3xl font-extrabold text-white dark:text-gray-800">Automação Predial</h1>
                </div>
                <div class="flex flex-col sm:flex-row items-center space-y-4 sm:space-y-0 sm:space-x-4">
                    <!-- Novo indicador de status da conexão -->
                    <div id="connection-status" class="flex items-center space-x-2 p-2 rounded-full font-bold text-sm">
                        <span id="connection-dot" class="w-3 h-3 rounded-full animate-pulse"></span>
                        <span id="connection-text">Conexão...</span>
                    </div>

                    <p id="datetime-display" class="text-xl font-semibold text-white dark:text-gray-800"></p>
                    <button id="view-logs-btn" class="py-2 px-4 rounded-xl font-bold text-white shadow-lg transition-all duration-300 transform hover:scale-105 bg-blue-600 hover:bg-blue-700">
                        Ver Logs
                    </button>
                </div>
            </header>
            
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
                <!-- Painel de Status Principal -->
                <div class="lg:col-span-2 p-8 rounded-3xl shadow-2xl transform transition-all duration-300 hover:scale-[1.01] bg-gray-800 bg-opacity-80 backdrop-blur-md dark:bg-gray-200 dark:bg-opacity-80">
                    <div>
                        <h2 class="text-3xl font-bold mb-6 text-white dark:text-gray-800">Status do Sistema</h2>
                        <div class="mb-8">
                            <p class="text-lg font-semibold mb-2 text-gray-300 dark:text-gray-700">Nível da Água na Caixa</p>
                            <div class="w-full h-10 bg-gray-700 rounded-full overflow-hidden relative shadow-inner dark:bg-gray-300">
                                <div id="water-level-bar" class="h-full rounded-full transition-all duration-1000 ease-out bg-gradient-to-r from-blue-500 to-cyan-400"></div>
                                <span id="nivelAgua" class="absolute inset-0 flex items-center justify-center text-white font-black text-lg"></span>
                            </div>
                        </div>
                        
                        <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 mb-8">
                            <!-- Card de Controle da Bomba -->
                            <div id="pump-status-card" class="p-6 rounded-2xl shadow-lg transition-all duration-300 transform hover:scale-105 bg-gray-700 dark:bg-gray-300">
                                <div class="flex justify-between items-center mb-4">
                                    <div>
                                        <p class="text-sm font-bold text-gray-400 dark:text-gray-700">Status da Bomba</p>
                                        <p id="statusBomba" class="text-xl font-bold text-red-500 dark:text-red-600">DESLIGADA</p>
                                    </div>
                                    <label class="relative inline-flex items-center cursor-pointer">
                                        <input type="checkbox" id="toggleBomba" class="sr-only peer" />
                                        <div class="w-14 h-8 bg-red-600 rounded-full peer peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 after:content-[''] after:absolute after:top-[4px] after:left-[4px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-6 after:w-6 after:transition-all peer-checked:bg-green-600 peer-checked:after:translate-x-full"></div>
                                    </label>
                                </div>
                            </div>
                            <!-- Card de Controle do Registro -->
                            <div id="valve-status-card" class="p-6 rounded-2xl shadow-lg transition-all duration-300 transform hover:scale-105 bg-emerald-800 status-glow">
                                <div class="flex justify-between items-center mb-4">
                                    <div>
                                        <p class="text-sm font-bold text-gray-400 dark:text-gray-700">Registro de Entrada</p>
                                        <p id="statusRegistro" class="text-xl font-bold text-green-400">ABERTO</p>
                                    </div>
                                    <label class="relative inline-flex items-center cursor-pointer">
                                        <input type="checkbox" id="toggleRegistro" class="sr-only peer" checked/>
                                        <div class="w-14 h-8 bg-red-600 rounded-full peer peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 after:content-[''] after:absolute after:top-[4px] after:left-[4px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-6 after:w-6 after:transition-all peer-checked:bg-green-600 peer-checked:after:translate-x-full"></div>
                                    </label>
                                </div>
                            </div>
                        </div>

                        <div id="maintenance-mode-card" class="p-6 rounded-2xl shadow-lg transition-all duration-300 transform hover:scale-105 bg-gray-700 dark:bg-gray-300">
                            <div class="flex items-center justify-between">
                                <div>
                                    <div class="flex items-center space-x-2 mb-1">
                                        <svg class="text-gray-400 w-5 h-5" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M14.7 6.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.77-3.77a6 6 0 0 1-7.94 7.94l-3.78 3.78a1 1 0 0 1-1.4 0L6.3 14.7a1 1 0 0 1 0-1.4l.7-.7zm-1.4 1.4L11 9.7"/></svg>
                                        <p class="text-sm font-bold text-gray-400 dark:text-gray-700">Modo de Manutenção</p>
                                    </div>
                                    <p id="maintenance-mode-text" class="text-xl font-bold text-gray-400 dark:text-gray-600">DESLIGADO</p>
                                </div>
                                <label class="relative inline-flex items-center cursor-pointer">
                                    <input type="checkbox" id="maintenance-toggle" class="sr-only peer" />
                                    <div class="w-14 h-8 bg-gray-600 rounded-full peer peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-red-300 dark:peer-focus:ring-red-800 after:content-[''] after:absolute after:top-[4px] after:left-[4px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-6 after:w-6 after:transition-all peer-checked:bg-red-600 peer-checked:after:translate-x-full"></div>
                                </label>
                            </div>
                            <div id="maintenance-controls" class="mt-4 hidden flex-col sm:flex-row gap-2">
                                <button id="maintenance-finish-btn" class="w-full py-2 px-4 rounded-xl font-bold text-white shadow-lg transition-all duration-300 transform hover:scale-105 bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600">
                                    Confirmar Limpeza Concluída
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mt-6 p-4 rounded-xl shadow-inner bg-gray-700 dark:bg-gray-300">
                        <p id="message-title" class="font-bold text-blue-400 dark:text-blue-700"></p>
                        <p id="system-message" class="mt-1 text-gray-300 dark:text-gray-800"></p>
                    </div>
                </div>

                <!-- Painel de Agendamento e Estatísticas -->
                <div class="p-8 rounded-3xl shadow-2xl transform transition-all duration-300 hover:scale-[1.01] bg-gray-800 bg-opacity-80 backdrop-blur-md dark:bg-gray-200 dark:bg-opacity-80">
                    <h2 class="text-3xl font-bold mb-6 text-white dark:text-gray-800">Estatísticas e Agendamento</h2>
                    
                    <!-- Este é o bloco dos picos de consumo, agora com um layout compacto -->
                    <div class="mb-6">
                        <p class="text-lg font-semibold mb-4 text-gray-300 dark:text-gray-700">Picos de Consumo (Simulado)</p>
                        <div id="usage-stats-container" class="grid grid-cols-4 sm:grid-cols-6 gap-2 text-center text-sm">
                            <!-- Os tiles de uso serão injetados aqui dinamicamente -->
                        </div>
                        <p class="text-sm font-medium text-gray-400 mt-4 dark:text-gray-600">
                            <span class="font-bold text-gray-300 dark:text-gray-700">Horários de menor movimento:</span> <span id="least-busy-hours"></span>
                        </p>
                    </div>

                    <div>
                        <p class="text-lg font-semibold mb-2 flex items-center space-x-2 text-gray-300 dark:text-gray-700">
                            <svg class="text-blue-500 w-5 h-5" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M8 2v4"/><path d="M16 2v4"/><rect width="18" height="18" x="3" y="4" rx="2"/><path d="M3 10h18"/><path d="m9 16 2 2 4-4"/></svg>
                            <span>Agendar Limpeza</span>
                        </p>
                        <p class="text-sm text-gray-400 mb-4 dark:text-gray-600">
                            Selecione a data e hora para agendar a manutenção da caixa d'água.
                        </p>
                        <div class="flex flex-col space-y-4">
                            <input type="datetime-local" id="scheduled-date-input" class="w-full p-3 border rounded-xl bg-gray-700 text-white dark:bg-gray-300 dark:text-gray-900 border-gray-600 dark:border-gray-400" />
                            <button id="schedule-submit-btn" class="w-full py-3 rounded-xl font-bold text-white shadow-lg transition-all duration-300 transform hover:scale-105 bg-gradient-to-r from-blue-600 to-cyan-500 hover:from-blue-700 hover:to-cyan-600">
                                Agendar Limpeza
                            </button>
                            <p id="scheduled-date-message" class="text-sm text-green-400 mt-2 hidden font-medium"></p>
                        </div>
                    </div>
                </div>
            </div>
            
            <footer class="mt-10 text-center text-gray-500 text-sm font-medium dark:text-gray-800">
                <p>&copy; 2025 Projeto Automatização - Direitos Reservados a MatheusDev</p>
            </footer>
        </div>

        <!-- Nova Tela de Logs -->
        <div id="log-screen" class="hidden z-10 w-full max-w-6xl mx-auto min-h-screen pt-12 pb-8">
            <header class="flex flex-col md:flex-row items-center justify-between mb-10 p-6 rounded-3xl shadow-2xl bg-gray-800 bg-opacity-80 backdrop-blur-md dark:bg-gray-200 dark:bg-opacity-80">
                <div class="flex items-center space-x-4 mb-4 md:mb-0">
                    <h1 class="text-3xl font-extrabold text-white dark:text-gray-800">Histórico de Logs</h1>
                </div>
                <div class="flex space-x-4">
                    <button id="clear-logs-btn" class="py-2 px-4 rounded-xl font-bold text-white shadow-lg transition-all duration-300 transform hover:scale-105 bg-red-600 hover:bg-red-700">
                        Limpar Logs
                    </button>
                    <button id="back-to-dashboard-btn" class="py-2 px-4 rounded-xl font-bold text-white shadow-lg transition-all duration-300 transform hover:scale-105 bg-blue-600 hover:bg-blue-700">
                        Voltar
                    </button>
                </div>
            </header>
            
            <div id="logs-container" class="space-y-4 p-8 rounded-3xl shadow-2xl bg-gray-800 bg-opacity-80 backdrop-blur-md dark:bg-gray-200 dark:bg-opacity-80">
                <!-- Os logs serão injetados aqui -->
                <p id="no-logs-message" class="text-center text-gray-400 dark:text-gray-600">Nenhum evento registrado ainda.</p>
            </div>
        </div>
    </div>

    <script>
        // --- Estado Inicial da Aplicação ---
        const initialState = {
            isAuthenticated: false,
            isDarkMode: true,
            waterLevel: 50,
            pumpStatus: false,
            valveStatus: true,
            maintenanceMode: false,
            scheduledDate: '',
            message: 'Sistema pronto para operar.',
            usageStats: {
                '00h': 10, '01h': 8, '02h': 5, '03h': 6, '04h': 7, 
                '05h': 12, '06h': 18, '07h': 35, '08h': 50, '09h': 65, 
                '10h': 70, '11h': 60, '12h': 55, '13h': 50, '14h': 45, 
                '15h': 40, '16h': 35, '17h': 30, '18h': 45, '19h': 60, 
                '20h': 50, '21h': 30, '22h': 20, '23h': 15
            },
            logs: [],
            registeredUsers: [{ username: 'SENAI4.0', password: 'carecacabuloso' }] // Usuário padrão
        };
        let state = {};

        // Variável de estado de conexão, agora declarada apenas uma vez.
        let isConnectedToAPI = false;

        // Token de segurança para cadastro
        const REGISTRATION_TOKEN = '251206';

        // --- Funções para Gerenciar o Armazenamento Local (simulação de DB) ---
        const saveStateToLocalStorage = () => {
            const stateToSave = { ...state };
            delete stateToSave.isAuthenticated;
            localStorage.setItem('waterTankAppState', JSON.stringify(stateToSave));
        };

        const loadStateFromLocalStorage = () => {
            const savedState = localStorage.getItem('waterTankAppState');
            if (savedState) {
                state = { ...initialState, ...JSON.parse(savedState) };
            } else {
                state = { ...initialState };
            }
        };

        // --- Elementos do DOM ---
        const body = document.body;
        const loginScreen = document.getElementById('login-screen');
        const registerScreen = document.getElementById('register-screen');
        const dashboardScreen = document.getElementById('dashboard-screen');
        const logScreen = document.getElementById('log-screen');
        const themeToggleBtn = document.getElementById('theme-toggle');
        const sunIcon = document.getElementById('sun-icon');
        const moonIcon = document.getElementById('moon-icon');
        const showRegisterBtn = document.getElementById('show-register-btn');
        const showLoginBtn = document.getElementById('show-login-btn');
        
        const loginForm = document.getElementById('login-form');
        const usernameInput = document.getElementById('username-input');
        const passwordInput = document.getElementById('password-input');
        const loginError = document.getElementById('login-error');
        
        const registerForm = document.getElementById('register-form');
        const registerUsernameInput = document.getElementById('register-username-input');
        const registerPasswordInput = document.getElementById('register-password-input');
        const registerPasswordConfirmInput = document.getElementById('register-password-confirm-input');
        const registerTokenInput = document.getElementById('register-token-input');
        const registerError = document.getElementById('register-error');

        const waterLevelBar = document.getElementById('water-level-bar');
        const nivelAgua = document.getElementById('nivelAgua');
        const pumpStatusCard = document.getElementById('pump-status-card');
        const statusBomba = document.getElementById('statusBomba');
        const valveStatusCard = document.getElementById('valve-status-card');
        const statusRegistro = document.getElementById('statusRegistro');
        const maintenanceModeCard = document.getElementById('maintenance-mode-card');
        const maintenanceModeText = document.getElementById('maintenance-mode-text');
        const maintenanceToggle = document.getElementById('maintenance-toggle');
        const maintenanceControls = document.getElementById('maintenance-controls');
        const maintenanceFinishBtn = document.getElementById('maintenance-finish-btn');
        const systemMessage = document.getElementById('system-message');
        const messageTitle = document.getElementById('message-title');
        const usageStatsContainer = document.getElementById('usage-stats-container');
        const leastBusyHoursSpan = document.getElementById('least-busy-hours');
        const scheduledDateInput = document.getElementById('scheduled-date-input');
        const scheduleSubmitBtn = document.getElementById('schedule-submit-btn');
        const scheduledDateMessage = document.getElementById('scheduled-date-message');
        const datetimeDisplay = document.getElementById('datetime-display');
        const viewLogsBtn = document.getElementById('view-logs-btn');
        const backToDashboardBtn = document.getElementById('back-to-dashboard-btn');
        const logsContainer = document.getElementById('logs-container');
        const clearLogsBtn = document.getElementById('clear-logs-btn');
        const noLogsMessage = document.getElementById('no-logs-message');
        const toggleBomba = document.getElementById('toggleBomba');
        const toggleRegistro = document.getElementById('toggleRegistro');
        const connectionDot = document.getElementById('connection-dot');
        const connectionText = document.getElementById('connection-text');

        let maintenanceCheckInterval = null;

        // --- Funções de Utilitário e Renderização da UI ---
        const addLog = (message) => {
            const now = new Date();
            const timestamp = now.toLocaleString('pt-BR');
            state.logs.unshift({ timestamp, message });
            saveStateToLocalStorage();
        };

        const updateDateTime = () => {
            const now = new Date();
            const options = { 
                weekday: 'long', 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric', 
                hour: '2-digit', 
                minute: '2-digit', 
                second: '2-digit' 
            };
            const formattedDate = now.toLocaleDateString('pt-BR', options);
            datetimeDisplay.textContent = formattedDate;
        };
        
        const showScreen = (screenId) => {
            loginScreen.classList.add('hidden');
            registerScreen.classList.add('hidden');
            dashboardScreen.classList.add('hidden');
            logScreen.classList.add('hidden');
            document.getElementById(screenId).classList.remove('hidden');
        };

        const updateUI = () => {
            // Atualiza a UI com base no estado atual
            body.classList.toggle('dark', state.isDarkMode);
            body.classList.toggle('bg-gray-900', state.isDarkMode);
            body.classList.toggle('text-gray-100', state.isDarkMode);
            body.classList.toggle('bg-gray-100', !state.isDarkMode);
            body.classList.toggle('text-gray-800', !state.isDarkMode);

            sunIcon.classList.toggle('hidden', !state.isDarkMode);
            moonIcon.classList.toggle('hidden', state.isDarkMode);
            
            // Corrige o fundo do botão de tema para o modo claro
            themeToggleBtn.classList.toggle('bg-gray-800', state.isDarkMode);
            themeToggleBtn.classList.toggle('text-white', state.isDarkMode);
            themeToggleBtn.classList.toggle('bg-gray-200', !state.isDarkMode);
            themeToggleBtn.classList.toggle('text-gray-800', !state.isDarkMode);

            maintenanceModeCard.className = `p-6 rounded-2xl shadow-lg transition-all duration-300 transform hover:scale-[1.01] ${state.maintenanceMode ? 'bg-red-800 status-red-glow' : 'bg-gray-700 dark:bg-gray-300'}`;
            maintenanceModeText.textContent = state.maintenanceMode ? 'ATIVADO' : 'DESLIGADO';
            maintenanceModeText.className = `text-xl font-bold ${state.maintenanceMode ? 'text-red-400' : 'text-gray-400 dark:text-gray-600'}`;
            maintenanceToggle.checked = state.maintenanceMode;
            maintenanceControls.classList.toggle('hidden', !state.maintenanceMode);

            systemMessage.textContent = state.message;
            messageTitle.textContent = state.message.includes("ALERTA") ? "ALERTA" : "INFO";
            messageTitle.className = `font-bold ${state.message.includes("ALERTA") ? 'text-red-400' : 'text-blue-400 dark:text-blue-700'}`;
            
            // Adiciona classe de desabilitado aos controles se estiver em modo de manutenção
            const controlElements = [pumpStatusCard];
            controlElements.forEach(el => {
                el.classList.toggle('disabled-element', state.maintenanceMode);
            });
            toggleBomba.disabled = state.maintenanceMode;

            renderUsageStats();
            renderLogs();

            if (state.scheduledDate) {
                const formattedDate = new Date(state.scheduledDate).toLocaleString('pt-BR');
                scheduledDateMessage.textContent = `Limpeza agendada para ${formattedDate}.`;
                scheduledDateMessage.classList.remove('hidden');
            } else {
                scheduledDateMessage.classList.add('hidden');
            }
        };

        const renderUsageStats = () => {
            usageStatsContainer.innerHTML = '';
            const sortedStats = Object.entries(state.usageStats).sort(([hourA], [hourB]) => parseInt(hourA) - parseInt(hourB));
            sortedStats.forEach(([hour, usage]) => {
                const div = document.createElement('div');
                div.className = `p-2 rounded-xl shadow-md transition-all duration-300 usage-tile font-medium transform hover:scale-110 ${usage > 50 ? 'bg-red-800 text-red-200' : 'bg-gray-700 text-gray-200 dark:bg-gray-400 dark:text-gray-800'}`;
                div.innerHTML = `<span class="block font-bold">${hour}</span><span class="text-xs">${usage}%</span>`;
                usageStatsContainer.appendChild(div);
            });
            const leastBusyHours = Object.entries(state.usageStats).sort(([, usageA], [, usageB]) => usageA - usageB).slice(0, 3).map(([hour]) => hour).join(', ');
            leastBusyHoursSpan.textContent = leastBusyHours;
        };

        const renderLogs = () => {
            logsContainer.innerHTML = '';
            if (state.logs.length === 0) {
                logsContainer.appendChild(noLogsMessage);
            } else {
                state.logs.forEach(log => {
                    const logItem = document.createElement('div');
                    logItem.className = 'p-4 rounded-xl shadow-md border border-gray-700 dark:border-gray-400 bg-gray-700 dark:bg-gray-300 transition-all duration-300 transform hover:scale-[1.01]';
                    logItem.innerHTML = `
                        <p class="text-sm text-gray-400 dark:text-gray-600">${log.timestamp}</p>
                        <p class="mt-1 font-medium text-gray-200 dark:text-gray-900">${log.message}</p>
                    `;
                    logsContainer.appendChild(logItem);
                });
            }
        };
        
        const activateMaintenance = () => {
             // Ativa o modo de manutenção automaticamente
            if (!state.maintenanceMode) {
                state.maintenanceMode = true;
                addLog("Modo de manutenção ATIVADO automaticamente.");
                state.message = "Modo de manutenção ATIVADO automaticamente conforme agendamento.";
                state.scheduledDate = ''; 
                // Desliga a bomba e o registro ao entrar no modo de manutenção
                enviarComando('bomba', 'off');
                enviarComando('registro', 'off');
                saveStateToLocalStorage();
                updateUI();
            }
        }
        
        const checkScheduledMaintenance = () => {
            if (state.scheduledDate && !state.maintenanceMode) {
                const now = new Date();
                const scheduledTime = new Date(state.scheduledDate);

                if (now.getTime() >= scheduledTime.getTime()) {
                    activateMaintenance();
                }
            }
        };
        
        // --- Lógica para mostrar/ocultar senha ---
        const setupPasswordToggles = () => {
            document.querySelectorAll('.show-password-btn').forEach(button => {
                button.addEventListener('click', () => {
                    const input = button.previousElementSibling;
                    const showIcon = button.querySelector('.show-icon');
                    const hideIcon = button.querySelector('.hide-icon');
                    
                    if (input.type === 'password') {
                        input.type = 'text';
                        showIcon.classList.add('hidden');
                        hideIcon.classList.remove('hidden');
                    } else {
                        input.type = 'password';
                        showIcon.classList.remove('hidden');
                        hideIcon.classList.add('hidden');
                    }
                });
            });
        };


        // --- Gerenciadores de Eventos ---
        themeToggleBtn.addEventListener('click', () => {
            state.isDarkMode = !state.isDarkMode;
            saveStateToLocalStorage();
            updateUI();
        });

        // Eventos para navegação de telas
        showRegisterBtn.addEventListener('click', (e) => {
            e.preventDefault();
            showScreen('register-screen');
        });

        showLoginBtn.addEventListener('click', (e) => {
            e.preventDefault();
            showScreen('login-screen');
            // Limpa os campos e mensagens de erro do formulário de cadastro ao voltar
            registerUsernameInput.value = '';
            registerPasswordInput.value = '';
            registerPasswordConfirmInput.value = '';
            registerTokenInput.value = '';
            registerError.classList.add('hidden');
            // Garante que o erro de login volte a ser vermelho
            loginError.classList.remove('text-green-400');
            loginError.classList.add('text-red-400');
        });

        loginForm.addEventListener('submit', (e) => {
            e.preventDefault();
            const username = usernameInput.value;
            const password = passwordInput.value;

            // Tenta encontrar o usuário nos usuários registrados
            const user = state.registeredUsers.find(u => u.username === username && u.password === password);

            if (user) {
                state.isAuthenticated = true;
                addLog(`Usuário "${username}" logado com sucesso.`);
                showScreen('dashboard-screen');
                saveStateToLocalStorage();
            } else {
                loginError.textContent = 'Usuário ou senha incorretos. Tente novamente.';
                // Garante que a cor do erro seja vermelha, caso tenha sido verde antes
                loginError.classList.remove('text-green-400');
                loginError.classList.add('text-red-400');
                loginError.classList.remove('hidden');
            }
        });
        
        registerForm.addEventListener('submit', (e) => {
            e.preventDefault();
            const username = registerUsernameInput.value;
            const password = registerPasswordInput.value;
            const confirmPassword = registerPasswordConfirmInput.value;
            const token = registerTokenInput.value;

            // Limpa mensagens de erro
            registerError.classList.add('hidden');

            // Validação de formulário
            if (password.length < 8) {
                registerError.textContent = 'A senha deve ter no mínimo 8 dígitos.';
                registerError.classList.remove('hidden');
                return;
            }

            if (password !== confirmPassword) {
                registerError.textContent = 'As senhas não coincidem.';
                registerError.classList.remove('hidden');
                return;
            }

            if (token !== REGISTRATION_TOKEN) {
                registerError.textContent = 'Token de segurança incorreto.';
                registerError.classList.remove('hidden');
                return;
            }

            if (state.registeredUsers.some(u => u.username === username)) {
                registerError.textContent = 'Nome de usuário já existe.';
                registerError.classList.remove('hidden');
                return;
            }

            // Se tudo estiver OK, adiciona o novo usuário
            state.registeredUsers.push({ username, password });
            addLog(`Novo usuário "${username}" cadastrado com sucesso.`);
            saveStateToLocalStorage();
            
            // Navega para a tela de login com uma mensagem de sucesso
            loginError.textContent = `Cadastro realizado com sucesso! Faça login com seu novo usuário "${username}".`;
            loginError.classList.remove('text-red-400');
            loginError.classList.add('text-green-400');
            loginError.classList.remove('hidden');
            showScreen('login-screen');
        });


        maintenanceToggle.addEventListener('change', (e) => {
            const newMode = e.target.checked;
            if (newMode) {
                state.message = "Modo de manutenção ATIVADO. Automação desativada.";
                state.maintenanceMode = newMode;
                // Desliga a bomba e o registro ao entrar no modo de manutenção
                enviarComando('bomba', 'off');
                enviarComando('registro', 'off');
                addLog("Modo de manutenção ativado manualmente.");
            } else {
                state.message = "Para desativar, use o botão 'Confirmar Limpeza Concluída'.";
                e.target.checked = true; // Impede a desativação pelo switch
            }
            saveStateToLocalStorage();
            updateUI();
        });

        maintenanceFinishBtn.addEventListener('click', () => {
            if (state.maintenanceMode) {
                state.message = "Limpeza finalizada. Sistema pronto para operar novamente.";
                state.maintenanceMode = false;
                maintenanceToggle.checked = false;
                addLog("Limpeza da caixa finalizada. Automação reativada.");
                
                // Liga a bomba e o registro ao sair da manutenção
                enviarComando('bomba', 'on');
                enviarComando('registro', 'on');
            }
            saveStateToLocalStorage();
            updateUI();
        });
        
        scheduleSubmitBtn.addEventListener('click', () => {
            const date = scheduledDateInput.value;
            if (date) {
                const now = new Date();
                const scheduledTime = new Date(date);
                
                if (scheduledTime.getTime() > now.getTime()) {
                    state.scheduledDate = date;
                    const formattedDate = new Date(date).toLocaleString('pt-BR');
                    state.message = `Limpeza agendada para: ${formattedDate}.`;
                    addLog(`Limpeza agendada para ${formattedDate}.`);
                } else {
                     state.message = 'A data e hora do agendamento não podem ser no passado.';
                }
            } else {
                state.message = 'Por favor, selecione uma data válida para o agendamento.';
            }
            saveStateToLocalStorage();
            updateUI();
        });
        
        viewLogsBtn.addEventListener('click', () => {
            showScreen('log-screen');
        });

        backToDashboardBtn.addEventListener('click', () => {
            showScreen('dashboard-screen');
        });
        
        clearLogsBtn.addEventListener('click', () => {
            state.logs = [];
            addLog("Logs do sistema limpos.");
            saveStateToLocalStorage();
            renderLogs();
        });
        
        // --- Inicialização da Aplicação ---
        window.addEventListener('load', () => {
            loadStateFromLocalStorage();
            setupPasswordToggles();
            
            // Define a data e hora mínimas para o input de agendamento como o momento atual
            const now = new Date();
            const year = now.getFullYear();
            const month = (now.getMonth() + 1).toString().padStart(2, '0');
            const day = now.getDate().toString().padStart(2, '0');
            const hour = now.getHours().toString().padStart(2, '0');
            const minute = now.getMinutes().toString().padStart(2, '0');
            const datetimeString = `${year}-${month}-${day}T${hour}:${minute}`;
            scheduledDateInput.setAttribute('min', datetimeString);
            
            // Inicia o relógio em tempo real
            updateDateTime();
            setInterval(updateDateTime, 1000);
            
            // Inicia a verificação de agendamento a cada minuto
            if (maintenanceCheckInterval) clearInterval(maintenanceCheckInterval);
            maintenanceCheckInterval = setInterval(checkScheduledMaintenance, 60000);

            if (state.isAuthenticated) {
                showScreen('dashboard-screen');
            } else {
                showScreen('login-screen');
            }
            updateUI();
        });
    </script>

    <!-- Script para Integração com a API -->
    <script>
        // --- LÓGICA DE CONEXÃO COM A API ---
        
        // URL da API fornecida pelo usuário
        const API_URL = 'https://4729f3c9-ba25-4482-b1df-8b6c892d63c4-00-2m7uq6359lv1d.kirk.replit.dev';
        
        // AVISO: O erro "Failed to fetch" geralmente ocorre por dois motivos:
        // 1. Sua API no Replit está temporariamente inativa.
        // 2. A política de segurança do navegador (CORS) está bloqueando a requisição.
        // Se você estiver executando este arquivo HTML localmente (por exemplo, `file:///...`),
        // sua API precisa responder com o cabeçalho 'Access-Control-Allow-Origin: *' para funcionar.
        // O código abaixo já possui tratamento de erro para isso, e irá indicar 'Sem Conexão'.

        /**
         * Envia um comando para a API.
         * @param {string} componente - O componente a ser controlado ('bomba', 'registro' ou 'manutencao').
         * @param {string} acao - A ação a ser executada ('on' ou 'off').
         */
        async function enviarComando(componente, acao) {
            try {
                // Monta a URL do comando
                const commandUrl = `${API_URL}/comando?${componente}=${acao}`;
                const response = await fetch(commandUrl);
                if (!response.ok) {
                    throw new Error(`Erro ao enviar comando: ${response.statusText}`);
                }
                console.log(`Comando enviado para API. Resposta: ${await response.text()}`);
            } catch (error) {
                console.error(`Falha ao enviar comando para a API: ${error.message}`);
                // Adiciona um log de erro para o usuário ver
                addLog(`ERRO: Falha ao enviar comando "${componente}=${acao}".`);
            }
        }

        /**
         * Busca o status atual do sistema na API e atualiza a interface.
         */
        async function buscarStatus() {
            try {
                const response = await fetch(`${API_URL}/status`);
                if (!response.ok) {
                    throw new Error(`Erro ao buscar status: ${response.statusText}`);
                }
                const data = await response.json();
                
                // Se a conexão foi bem-sucedida, atualiza o status de conexão
                if (!isConnectedToAPI) {
                    isConnectedToAPI = true;
                    connectionDot.classList.remove('bg-yellow-500', 'animate-pulse', 'bg-red-500');
                    connectionDot.classList.add('bg-green-500');
                    connectionText.textContent = 'Conexão OK';
                    systemMessage.textContent = 'Conexão com a API estabelecida com sucesso.';
                    messageTitle.textContent = 'INFO';
                }

                // A API retorna o nível de 0 a 4, convertemos para 0-100% para a barra de progresso.
                const nivel = (data.nivel / 4) * 100;
                
                // Atualiza o nível da água
                nivelAgua.textContent = `${nivel.toFixed(0)}%`;
                waterLevelBar.style.width = `${nivel}%`;
                if (nivel <= 20) {
                    waterLevelBar.className = 'h-full rounded-full transition-all duration-1000 ease-out bg-gradient-to-r from-red-500 to-red-400';
                } else if (nivel <= 80) {
                    waterLevelBar.className = 'h-full rounded-full transition-all duration-1000 ease-out bg-gradient-to-r from-yellow-500 to-yellow-400';
                } else {
                    waterLevelBar.className = 'h-full rounded-full transition-all duration-1000 ease-out bg-gradient-to-r from-blue-500 to-cyan-400';
                }
                
                // Atualiza o status da bomba e o switch
                const bombaLigada = (data.bomba === 1);
                toggleBomba.checked = bombaLigada;
                statusBomba.textContent = bombaLigada ? 'LIGADA' : 'DESLIGADA';
                statusBomba.classList.toggle('text-green-500', bombaLigada);
                statusBomba.classList.toggle('text-red-500', !bombaLigada);
                pumpStatusCard.className = `p-6 rounded-2xl shadow-lg transition-all duration-300 transform hover:scale-105 ${bombaLigada ? 'bg-emerald-800 status-glow' : 'bg-gray-700 dark:bg-gray-300'}`;
                
                // Atualiza o status do registro e o switch
                const registroAberto = (data.registro === 1);
                toggleRegistro.checked = registroAberto;
                statusRegistro.textContent = registroAberto ? 'ABERTO' : 'FECHADO';
                statusRegistro.classList.toggle('text-green-500', registroAberto);
                statusRegistro.classList.toggle('text-white', !registroAberto);
                valveStatusCard.className = `p-6 rounded-2xl shadow-lg transition-all duration-300 transform hover:scale-105 ${registroAberto ? 'bg-emerald-800 status-glow' : 'bg-red-800 status-red-glow'}`;
                
                // Atualiza o status do modo de manutenção
                state.maintenanceMode = (data.manutencao === 1);
                updateUI();

            } catch (error) {
                console.error(`Falha ao buscar status da API: ${error.message}`);
                
                // Se a conexão falhar, atualiza o status de conexão para vermelho
                isConnectedToAPI = false;
                connectionDot.classList.remove('bg-yellow-500', 'animate-pulse', 'bg-green-500');
                connectionDot.classList.add('bg-red-500');
                connectionText.textContent = 'Sem Conexão';

                // Mostra um alerta no sistema
                if (!state.maintenanceMode) {
                    systemMessage.textContent = 'ALERTA: Falha na comunicação com a API.';
                    messageTitle.textContent = "ALERTA";
                }
            }
        }
        
        /**
         * Tenta se conectar à API e inicia o loop de atualização.
         */
        async function conectarComAPI() {
            // Inicia com o status de procura
            connectionDot.classList.add('bg-yellow-500', 'animate-pulse');
            connectionText.textContent = 'Procurando Conexão...';
            
            // Primeira tentativa de busca para verificar a conexão
            await buscarStatus();

            // Inicia o loop de atualização do status a cada 3 segundos
            setInterval(buscarStatus, 3000);
        }

        // Adiciona event listeners aos switches
        toggleBomba.addEventListener('change', (e) => {
            const novoStatus = e.target.checked ? 'on' : 'off';
            enviarComando('bomba', novoStatus);
        });

        toggleRegistro.addEventListener('change', (e) => {
            const novoStatus = e.target.checked ? 'on' : 'off';
            enviarComando('registro', novoStatus);
        });

        maintenanceToggle.addEventListener('change', (e) => {
             const novoStatus = e.target.checked ? 'on' : 'off';
            // A API vai controlar o estado de manutenção, nós apenas enviamos o comando
            enviarComando('manutencao', novoStatus);
        });

        maintenanceFinishBtn.addEventListener('click', () => {
            // Envia o comando para desativar a manutenção via API
            enviarComando('manutencao', 'off');
        });

        // Chama a função de conexão ao carregar a página
        document.addEventListener('DOMContentLoaded', conectarComAPI);
    </script>
</body>
</html>
